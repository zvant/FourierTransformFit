/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fourier.fitting.graphic;

import fourier.fitting.Complex;
import fourier.fitting.FourierTransform;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractCellEditor;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author caoyuan9642
 */
public class GraphicFitting extends javax.swing.JFrame {

    private boolean show_image = false;
    private boolean show_grid = false;
    private boolean show_curve = true;
    private boolean show_animation = true;

    private ArrayList<Point2D> sample_points = new ArrayList<>(); // points to get fitting

    private Complex[] coef = new Complex[]{new Complex(0, 0), new Complex(0, 0), new Complex(0, 0)};

    /**
     *
     */
    private int n = 2;

    private ComplexIconEditor editor = new ComplexIconEditor();
    private ComplexIconRenderer renderer = new ComplexIconRenderer();
    private boolean ordering;
    private int order_index;

    /**
     * Creates new form GraphicFitting
     */
    public GraphicFitting() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        canvas = new FourierCanvas();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        coefficients_table = new javax.swing.JTable();
        button_calculate = new javax.swing.JButton();
        button_clear = new javax.swing.JButton();
        button_loadImage = new javax.swing.JButton();
        checkbox_show_grid = new javax.swing.JCheckBox();
        checkbox_show_curve = new javax.swing.JCheckBox();
        checkbox_show_image = new javax.swing.JCheckBox();
        checkbox_show_animation = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        label_level_n = new javax.swing.JLabel();
        button_auto_order = new javax.swing.JButton();
        button_manual_order = new javax.swing.JButton();
        button_symmetrize_x = new javax.swing.JButton();
        button_symmetrize_y = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fourier Transform");
        setMinimumSize(new java.awt.Dimension(500, 600));

        canvas.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        canvas.setDoubleBuffered(false);
        canvas.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel2.setPreferredSize(new java.awt.Dimension(240, 550));

        jLabel2.setText("Coefficients");

        coefficients_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "n", "Re", "Im", "Complex"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        coefficients_table.setColumnSelectionAllowed(true);
        coefficients_table.setRowHeight(32);
        coefficients_table.getTableHeader().setReorderingAllowed(false);
        coefficients_table.getModel().addTableModelListener(new TableListener());
        jScrollPane1.setViewportView(coefficients_table);
        coefficients_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (coefficients_table.getColumnModel().getColumnCount() > 0) {
            coefficients_table.getColumnModel().getColumn(3).setResizable(false);
            coefficients_table.getColumnModel().getColumn(3).setPreferredWidth(32);
        }

        button_calculate.setText("Calculate Coefficients");
        button_calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_calculateActionPerformed(evt);
            }
        });

        button_clear.setText("Clear Points");
        button_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_clearActionPerformed(evt);
            }
        });

        button_loadImage.setText("Load Image");
        button_loadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_loadImageActionPerformed(evt);
            }
        });

        checkbox_show_grid.setText("Show Grid");
        checkbox_show_grid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_show_gridActionPerformed(evt);
            }
        });

        checkbox_show_curve.setSelected(true);
        checkbox_show_curve.setText("Show Curve");
        checkbox_show_curve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_show_curveActionPerformed(evt);
            }
        });

        checkbox_show_image.setText("Show Image");
        checkbox_show_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_show_imageActionPerformed(evt);
            }
        });

        checkbox_show_animation.setSelected(true);
        checkbox_show_animation.setText("Show Animation");
        checkbox_show_animation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_show_animationActionPerformed(evt);
            }
        });

        jLabel1.setText("Level n:");

        label_level_n.setText("0");

        button_auto_order.setText("Auto Order");
        button_auto_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_auto_orderActionPerformed(evt);
            }
        });

        button_manual_order.setText("Manual Order");
        button_manual_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_manual_orderActionPerformed(evt);
            }
        });

        button_symmetrize_x.setText("Symmetrize(x)");
        button_symmetrize_x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_symmetrize_xActionPerformed(evt);
            }
        });

        button_symmetrize_y.setText("Symmetrize(y)");
        button_symmetrize_y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_symmetrize_yActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_level_n, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkbox_show_image, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                    .addComponent(checkbox_show_grid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkbox_show_animation)
                                    .addComponent(checkbox_show_curve, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(button_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(button_loadImage, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(button_calculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button_auto_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(button_symmetrize_x, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(button_symmetrize_y, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(button_manual_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(label_level_n))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_clear)
                    .addComponent(button_loadImage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkbox_show_animation)
                    .addComponent(checkbox_show_image))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkbox_show_grid)
                    .addComponent(checkbox_show_curve))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_calculate)
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_auto_order)
                    .addComponent(button_manual_order))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_symmetrize_x)
                    .addComponent(button_symmetrize_y))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkbox_show_animationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_show_animationActionPerformed
        // TODO add your handling code here:
        show_animation = checkbox_show_animation.isSelected();
        canvas.repaint();
    }//GEN-LAST:event_checkbox_show_animationActionPerformed

    private void checkbox_show_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_show_imageActionPerformed
        // TODO add your handling code here:
        show_image = checkbox_show_image.isSelected();
        canvas.repaint();
    }//GEN-LAST:event_checkbox_show_imageActionPerformed

    private void checkbox_show_curveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_show_curveActionPerformed
        // TODO add your handling code here:
        show_curve = checkbox_show_curve.isSelected();
        canvas.repaint();
    }//GEN-LAST:event_checkbox_show_curveActionPerformed

    private void checkbox_show_gridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_show_gridActionPerformed
        // TODO add your handling code here:
        show_grid = checkbox_show_grid.isSelected();
        canvas.repaint();
    }//GEN-LAST:event_checkbox_show_gridActionPerformed

    private void button_loadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_loadImageActionPerformed
        // TODO add your handling code here:
        ((FourierCanvas) canvas).loadImage();
        if (!show_image) {
            checkbox_show_image.doClick();
        }
        canvas.repaint();
    }//GEN-LAST:event_button_loadImageActionPerformed

    private void button_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_clearActionPerformed
        // TODO add your handling code here:
        sample_points.clear();
        ordering = false;
        canvas.repaint();
    }//GEN-LAST:event_button_clearActionPerformed

    private void button_calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_calculateActionPerformed
        //TODO ADD CODE Here

        FourierTransform DFT = new FourierTransform();
        sample_points.stream().forEach((sample) -> {
            DFT.addSample(new Complex(sample.getX(), -1 * sample.getY()));
        });
        DFT.transform();
        DFT.showTransform();

        coef = DFT.getCoeffs().toArray(new Complex[0]);

        updateCoef();
        canvas.repaint();
    }//GEN-LAST:event_button_calculateActionPerformed

    private void button_symmetrize_xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_symmetrize_xActionPerformed
        // TODO add your handling code here:
        symmetrize(Math.PI / 2);
        updateCoef();
        canvas.repaint();
    }//GEN-LAST:event_button_symmetrize_xActionPerformed

    private void button_symmetrize_yActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_symmetrize_yActionPerformed
        // TODO add your handling code here:
        symmetrize(0);
        updateCoef();
        canvas.repaint();
    }//GEN-LAST:event_button_symmetrize_yActionPerformed

    private void button_auto_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_auto_orderActionPerformed
        // TODO add your handling code here:
        reorder();
        canvas.repaint();
    }//GEN-LAST:event_button_auto_orderActionPerformed

    private void button_manual_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_manual_orderActionPerformed
        // TODO add your handling code here:
        if (!ordering) {
            order_index = 0;
            ordering = true;
        } else {
            ordering = false;
        }
        canvas.repaint();
    }//GEN-LAST:event_button_manual_orderActionPerformed

    /**
     * Evaluate the Fourier series at time t
     */
    private Complex evaluateFourier(double t, boolean zeroth) {

        Complex sum = new Complex(0, 0);
        for (int i = 1; i < n; i++) {
            int f = (i > n - i) ? (-n + i) : i;
            sum = sum.plus(coef[i].times(Complex.fromPolar(1, f * t)));
        }
        if (zeroth && n > 0) {
            sum = sum.plus(coef[0]);
        }
        return sum;
    }

    /**
     * Symmetrize along polar angle `angle`
     */
    private void symmetrize(double angle) {
        int resolution = 100;
        Complex r = Complex.fromPolar(1, angle), p = new Complex(0, 0), q = new Complex(0, 0);
        boolean found = false;
        double t = 0, delta = 0;
        while (resolution < 2000) {
            delta = 2 * Math.PI / resolution;
            p = evaluateFourier(0, false);
            for (t = delta; t <= 2 * Math.PI; t += delta) {
                q = evaluateFourier(t, false);
                if (p.divides(r).im() * q.divides(r).im() <= 0) {
                    /*Crossing found*/
                    found = true;
                    break;
                }
                p = q;
            }
            if (found) {
                break;
            }
            resolution *= 2;
        }
        if (!found) {
            /*Failed. Do nothing*/
            System.err.println("Symmetrization failed.");
            return;
        }

        System.out.println("PQ " + p + " " + q + " " + r);
        // Now execute the  binary search
        double tl = t - delta, tr = t;
        while (p.minus(q).abs() > 1e-6) {
            t = (tr + tl) / 2;
            Complex mid = evaluateFourier(t, false);
            if (mid.divides(r).im() * p.divides(r).im() <= 0) {
                tr = t;
                q = mid;
            } else {
                tl = t;
                p = mid;
            }
            System.out.println("BS " + tl + " " + tr + " " + mid);
        }
        System.out.println(t + " " + p + " " + q);
        // Now, at time t we are sure the vector points to the desired angle
        for (int i = 1; i < n; i++) {
            int f = (i > n - i) ? (-n + i) : i;
            // We redefine this as t=0, and therefore there comes up this new phase
            coef[i] = coef[i].times(Complex.fromPolar(1, t * f + (angle - Math.PI / 2)));
            // Now, from the symmetry it is required that the real part must be zero
            coef[i] = new Complex(0, coef[i].im()).times(Complex.fromPolar(1, Math.PI / 2 - angle));
        }
        //System.out.println(evaluateFourier(0,false));
    }

    private void updateCoef() {
        // TODO add your handling code here:
        n = coef.length;
        Object model[][] = new Object[n][4];
        for (int i = 0; i < n; i++) {
            model[i][0] = i;
            model[i][1] = coef[i].re();
            model[i][2] = coef[i].im();
            model[i][3] = coef[i];
        }
        coefficients_table.setModel(new javax.swing.table.DefaultTableModel(
                model,
                new String[]{
                    "n", "Re", "Im", ""
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, Complex.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, true, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        coefficients_table.getModel().addTableModelListener(new TableListener());
        coefficients_table.getColumnModel().getColumn(3).setResizable(false);
        coefficients_table.getColumnModel().getColumn(3).setWidth(ComplexIconRenderer.SIZE);
        coefficients_table.getColumnModel().getColumn(3).setCellEditor(editor);
        coefficients_table.getColumnModel().getColumn(3).setCellRenderer(renderer);

        label_level_n.setText("" + n);
    }

    /**
     * sort the sample points to get better performance
     */
    public void reorder() {
        Point2D sum = sample_points.stream().reduce(new Point2D.Double(0, 0), (p, q) -> new Point2D.Double(p.getX() + q.getX(), p.getY() + q.getY()));
        Point2D center = new Point2D.Double(sum.getX() / sample_points.size(), sum.getY() / sample_points.size());
        sample_points.sort(
                (p, q) -> {
                    return (int) Math.signum(Math.atan2(p.getY() - center.getY(), p.getX() - center.getX()) - Math.atan2(q.getY() - center.getY(), q.getX() - center.getX()));
                }
        );
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicFitting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicFitting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicFitting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicFitting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GraphicFitting().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_auto_order;
    private javax.swing.JButton button_calculate;
    private javax.swing.JButton button_clear;
    private javax.swing.JButton button_loadImage;
    private javax.swing.JButton button_manual_order;
    private javax.swing.JButton button_symmetrize_x;
    private javax.swing.JButton button_symmetrize_y;
    private javax.swing.JPanel canvas;
    private javax.swing.JCheckBox checkbox_show_animation;
    private javax.swing.JCheckBox checkbox_show_curve;
    private javax.swing.JCheckBox checkbox_show_grid;
    private javax.swing.JCheckBox checkbox_show_image;
    private javax.swing.JTable coefficients_table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label_level_n;
    // End of variables declaration//GEN-END:variables

    private class FourierCanvas extends javax.swing.JPanel
            implements MouseListener, MouseMotionListener, ComponentListener, Runnable, MouseWheelListener {

        private BufferedImage image;
        private AffineTransform trans;
        private double image_scale;
        private Thread animation_thread;
        private double time;
        private double scale = 100;
        private Point2D origin = new Point2D.Double(0, 0);
        private int highlight = -1;
        private int dragging = -1;
        private boolean panning = false;

        /**
         * Creates new form FourierCanvas
         */
        public FourierCanvas() {
            this.addMouseListener(this);
            this.addMouseMotionListener(this);
            this.addComponentListener(this);
            this.addMouseWheelListener(this);
            trans = new AffineTransform();
            updateTransform();
            animation_thread = new Thread(this);
            animation_thread.start();
        }

        private void updateTransform() {
            trans.setToIdentity();
            trans.translate(getWidth() / 2, getHeight() / 2);
            trans.scale(scale, scale);
            trans.translate(-origin.getX(), -origin.getY());
        }

        @Override
        public void paintComponent(Graphics g) {
            //System.out.println("repaint");
            int width = getWidth();
            int height = getHeight();
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.WHITE);
            g2.fillRect(0, 0, width, height);

            //System.out.println(show_image);
            if (show_image && image != null) {
                //g2.drawImage(image, 0, 0, width, height, null);
                Point2D lefttop = new Point2D.Double(-0.5 * image_scale * image.getWidth(), -0.5 * image_scale * image.getHeight());
                //System.out.println(lefttop);
                trans.transform(lefttop, lefttop);
                //System.out.println(lefttop);
                g2.drawImage(image, (int) lefttop.getX(), (int) lefttop.getY(), (int) (image_scale * image.getWidth() * scale), (int) (image_scale * image.getHeight() * scale), this);
            }

            if (show_grid) {
                g2.setColor(Color.yellow);
                for (int x = 0; x <= width / 2.0; x += 50) {
                    g2.draw(new Line2D.Double(width / 2.0 + x, 0, width / 2.0 + x, height));
                    g2.draw(new Line2D.Double(width / 2.0 - x, 0, width / 2.0 - x, height));
                }
                for (int y = 0; y <= height / 2.0; y += 50) {
                    g2.draw(new Line2D.Double(0, height / 2.0 + y, width, height / 2.0 + y));
                    g2.draw(new Line2D.Double(0, height / 2.0 - y, width, height / 2.0 - y));
                }

                g2.setStroke(new BasicStroke(2f));
                g2.draw(new Line2D.Double(width / 2.0, 0, width / 2.0, height));
                g2.draw(new Line2D.Double(0, height / 2.0, width, height / 2.0));

            }

            g2.setStroke(new BasicStroke());
            g2.setFont(g2.getFont().deriveFont(5));
            for (int i = 0; i < sample_points.size(); i++) {
                Point2D p = sample_points.get(i);
                Point2D tp = trans.transform(p, null);
                if (!ordering) {
                    g2.setColor(Color.red);
                } else {
                    g2.setColor(Color.blue);
                }
                if (highlight == i) {
                    g2.fill(new Ellipse2D.Double(
                            tp.getX() - 4,
                            tp.getY() - 4,
                            8, 8)
                    );
                } else {
                    g2.draw(new Ellipse2D.Double(
                            tp.getX() - 2,
                            tp.getY() - 2,
                            4, 4)
                    );
                }
                g2.setColor(Color.black);
                g2.drawString("" + i, (int) tp.getX() - 5, (int) tp.getY() - 5);
            }

            g2.setColor(Color.blue);
            //System.out.println(show_curve);
            if (show_curve) {
                ArrayList<Point2D> curve = new ArrayList();
                for (double t = 0; t < 2 * Math.PI; t += Math.PI / Math.min(100 * n, 1500)) {
//                    double x = 0, y = 0;
//                    for (int i = 0; i < n; i++) {
//                        int f = (i > n - i) ? (-n + i) : i;
//                        x += coef[i].re() * Math.cos(f * t) - coef[i].im() * Math.sin(f * t);
//                        y += coef[i].im() * Math.cos(f * t) + coef[i].re() * Math.sin(f * t);
//                    }
                    Point2D tp = trans.transform(evaluateFourier(t, true).conjugate().getPoint(), null);
                    //System.out.println(tp.getX() + " " + tp.getY());
                    curve.add(tp);
                }
                for (int i = 0; i < curve.size(); i++) {
                    g2.draw(new Line2D.Double(curve.get(i), curve.get((i + 1) % curve.size())));
                }
            }

            if (show_animation && n != 0) {
                Complex current = coef[0];
                for (int i = 1; i * 2 <= n; i++) {
                    /*Level i*/
                    double radius = coef[i].abs();
                    Point2D lt = new Point2D.Double(current.re() - radius, -current.im() - radius);
                    Point2D rb = new Point2D.Double(current.re() + radius, -current.im() + radius);
                    Point2D center = current.conjugate().getPoint();
                    double phase = i * time + coef[i].phase();
                    current = current.plus(Complex.fromPolar(radius, phase));
                    Point2D endpoint = current.conjugate().getPoint();
                    trans.transform(lt, lt);
                    trans.transform(rb, rb);
                    trans.transform(center, center);
                    trans.transform(endpoint, endpoint);
                    Ellipse2D circ = new Ellipse2D.Double();
                    circ.setFrameFromDiagonal(lt, rb);
                    g2.setColor(Color.lightGray);
                    g2.draw(circ);
                    g2.setColor(Color.darkGray);
                    g2.draw(new Line2D.Double(center, endpoint));

                    /*Level N-i === -i*/
                    if (i * 2 != n) {
                        radius = coef[n - i].abs();
                        lt = new Point2D.Double(current.re() - radius, -current.im() - radius);
                        rb = new Point2D.Double(current.re() + radius, -current.im() + radius);
                        center = current.conjugate().getPoint();
                        phase = -i * time + coef[n - i].phase();
                        current = current.plus(Complex.fromPolar(radius, phase));
                        endpoint = current.conjugate().getPoint();
                        trans.transform(lt, lt);
                        trans.transform(rb, rb);
                        trans.transform(center, center);
                        trans.transform(endpoint, endpoint);
                        circ = new Ellipse2D.Double();
                        circ.setFrameFromDiagonal(lt, rb);
                        g2.setColor(Color.lightGray);
                        g2.draw(circ);
                        g2.setColor(Color.darkGray);
                        g2.draw(new Line2D.Double(center, endpoint));
                    }
                }
            }
        }

        public void loadImage() {
            JFileChooser file_chooser = new JFileChooser();
            file_chooser.setCurrentDirectory(new File("."));
            file_chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int result = file_chooser.showOpenDialog(GraphicFitting.this);
            if (result == JFileChooser.APPROVE_OPTION) {
                try {
                    image = ImageIO.read(new File(file_chooser.getSelectedFile().getPath()));
                } catch (IOException ex) {
                    Logger.getLogger(GraphicFitting.class.getName()).log(Level.SEVERE, null, ex);
                }
                image_scale = Math.min((double) this.getWidth() / image.getWidth(), (double) this.getHeight() / image.getHeight()) / scale;
                //System.out.println("scale=" + image_scale);
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
        }

        Point2D last_pos;

        @Override
        public void mousePressed(MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                if (highlight != -1) {
                    if (!ordering) {
                        dragging = highlight;
                    } else {
                        Point2D temp = sample_points.get(order_index);
                        sample_points.set(order_index, sample_points.get(highlight));
                        sample_points.set(highlight, temp);
                        highlight = order_index;
                        ++order_index;
                    }
                }
            }
            if (e.getButton() == MouseEvent.BUTTON3) { /*Right click: erase point*/

                if (highlight != -1 && !ordering) {
                    sample_points.remove(highlight);
                    highlight = -1;
                    dragging = -1;
                }
            }
            if (e.getButton() == MouseEvent.BUTTON2) { // Middle click: Pan
                panning = true;
                last_pos = e.getPoint();
            }
            repaint();
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                if (dragging == -1 && !ordering) { /*Left click: create point*/
                    /*Create new point*/

                    Point2D newpoint = null;
                    try {
                        newpoint = trans.inverseTransform(e.getPoint(), null);
                    } catch (NoninvertibleTransformException ex) {
                        Logger.getLogger(GraphicFitting.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //System.out.println("clicked at " + newpoint.toString());
                    sample_points.add(newpoint);
                } else {
                    dragging = -1;
                    if (order_index >= sample_points.size()) {
                        ordering = false;
                    }
                }
            }
            if (e.getButton() == MouseEvent.BUTTON2) {
                panning = false;
            }
            repaint();
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

        @Override
        public void mouseMoved(MouseEvent e) {
            for (int i = 0; i < sample_points.size(); i++) {
                Point2D p = sample_points.get(i);
                if (trans.transform(p, null).distance(e.getPoint()) <= 8) {
                    highlight = i;
                    repaint();
                    return;
                }
            }
            if (highlight != -1) {
                highlight = -1;
                repaint();
            }
        }

        @Override
        public void mouseDragged(MouseEvent e) {
            if (dragging != -1 && !ordering && !panning) {
                try {
                    if (dragging < sample_points.size()) {
                        sample_points.set(dragging, trans.inverseTransform(e.getPoint(), null));
                    }
                } catch (NoninvertibleTransformException ex) {
                    Logger.getLogger(GraphicFitting.class.getName()).log(Level.SEVERE, null, ex);
                }
                repaint();
            }
            if (panning) {
                origin = new Point2D.Double(origin.getX() - (e.getX() - last_pos.getX()) / scale, origin.getY() - (e.getY() - last_pos.getY()) / scale);
                updateTransform();
                last_pos = e.getPoint();
                repaint();
            }
        }

        @Override
        public void componentResized(ComponentEvent ce) {
            updateTransform();
            repaint();
        }

        @Override
        public void componentMoved(ComponentEvent ce) {
        }

        @Override
        public void componentShown(ComponentEvent ce) {
        }

        @Override
        public void componentHidden(ComponentEvent ce) {
        }

        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(5l);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GraphicFitting.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (show_animation) {
                    time += 2 * Math.PI / 3000;
                    repaint();
                }
            }
        }

        @Override
        public void mouseWheelMoved(MouseWheelEvent mwe) {
            double scale_change = 1 + mwe.getPreciseWheelRotation() / 8;
            if (scale_change < 0) {
                scale_change = 0.1;
            }
            scale *= scale_change;
            Point2D fix = null;
            try {
                fix = trans.inverseTransform(mwe.getPoint(), null);
            } catch (NoninvertibleTransformException ex) {
                Logger.getLogger(GraphicFitting.class.getName()).log(Level.SEVERE, null, ex);
            }
            /*This new origin will keep the fixed point unchanged*/
            origin = new Point2D.Double(origin.getX() * 1 / scale_change + fix.getX() * (1 - 1 / scale_change),
                    origin.getY() * 1 / scale_change + fix.getY() * (1 - 1 / scale_change));
            updateTransform();
            repaint();
        }
    }

    private class ComplexIconRenderer extends JComponent implements TableCellRenderer, MouseListener {

        private static final int SIZE = 32;
        private Complex value;
        private final boolean highlight;
        private final ComplexIconEditor editor;

        public ComplexIconRenderer() {
            super();
            value = new Complex(0, 0);
            this.setSize(SIZE, SIZE);
            this.highlight = false;
            editor = null;
        }

        public ComplexIconRenderer(ComplexIconEditor edit) {
            super();
            value = new Complex(0, 0);
            this.setSize(SIZE, SIZE);
            this.highlight = true;
            this.addMouseListener(this);
            editor = edit;
        }

        @Override
        public void paintComponent(Graphics g) {
            //System.out.println("Render");
            Graphics2D g2 = (Graphics2D) g;
            System.out.println(highlight);
            if (highlight) {
                g2.setColor(Color.LIGHT_GRAY);
            } else {
                g2.setColor(Color.WHITE);
            }
            g2.fillRect(0, 0, SIZE, SIZE);
            g2.setColor(Color.BLACK);
            g2.drawOval(0, 0, SIZE, SIZE);
            if (value.abs() > 1e-2) {
                Path2D arrow = new Path2D.Double();
                double length = Math.min(value.abs() / 2 * SIZE, SIZE + 1);
                double angle = value.phase();
                arrow.moveTo(-length, 0);
                arrow.lineTo(0, 0);
                arrow.lineTo(-2, 2);
                arrow.moveTo(0, 0);
                arrow.lineTo(-2, -2);
                AffineTransform transform = new AffineTransform();
                transform.translate(SIZE / 2.0, SIZE / 2.0);
                transform.rotate(-angle);
                transform.translate(length, 0);
                arrow.transform(transform);
                g2.draw(arrow);
            } else {
                g2.draw(new Rectangle2D.Double(SIZE / 2.0 - 0.5, SIZE / 2.0 - 0.5, 1, 1));
            }
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            //System.out.println("get Renderer");
            this.value = (Complex) value;
            return this;
        }

        private void update_value(MouseEvent me) {
            if (highlight) {
                //System.out.println("ha");
                double re = (double) me.getX() / SIZE * 2 - 1;
                double im = -(double) me.getY() / SIZE * 2 + 1;
                value = new Complex(re, im);
                //System.out.println(value);
                editor.stopCellEditing();   /*Tell the editor to accept current value*/

                repaint();
            }
        }

        @Override
        public void mouseClicked(MouseEvent me) {
        }

        @Override
        public void mousePressed(MouseEvent me) {
            System.out.println("press");
            update_value(me);
        }

        @Override
        public void mouseReleased(MouseEvent me) {
        }

        @Override
        public void mouseEntered(MouseEvent me) {
        }

        @Override
        public void mouseExited(MouseEvent me) {
        }
    }

    private class ComplexIconEditor extends AbstractCellEditor implements TableCellEditor {

        public ComplexIconRenderer renderer = new ComplexIconRenderer(this);

        public ComplexIconEditor() {
            super();

        }

        @Override
        public Object getCellEditorValue() {
            //System.out.println("get value");
            return renderer.value;
        }

        @Override
        public Component getTableCellEditorComponent(JTable jtable, Object o, boolean bln, int i, int i1) {
            //System.out.println("get editor");
            return renderer;
        }

    }
    
    private class TableListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent tme) {
            TableModel model = (TableModel) tme.getSource();
            model.removeTableModelListener(this); /*Remove temporarily to prevent recursive event*/

            if (tme.getColumn() == 1 || tme.getColumn() == 2) {
                for (int i = tme.getFirstRow(); i <= tme.getLastRow(); i++) {
                    Object RV = model.getValueAt(i, 1);
                    Object IV = model.getValueAt(i, 2);
                    double re = (Double) RV;
                    double im = (Double) IV;
                    coef[i] = new Complex(re, im);
                    model.setValueAt(coef[i], i, 3);
                }
            } else if (tme.getColumn() == 3) {
                for (int i = tme.getFirstRow(); i <= tme.getLastRow(); i++) {
                    coef[i] = (Complex) model.getValueAt(i, 3);
                    model.setValueAt(coef[i].re(), i, 1);
                    model.setValueAt(coef[i].im(), i, 2);
                }
            }
            model.addTableModelListener(this);
            GraphicFitting.this.canvas.repaint();
        }

    }
}
